{"version":3,"sources":["webpack:///./src/animations/assists/cursor.js","webpack:///./src/animations/assists/utils.js"],"names":["mouse","x","y","Cursor","el","DOM","style","opacity","bounds","getBoundingClientRect","renderedStyles","tx","previous","current","amt","ty","window","addEventListener","onMouseMoveEv","width","height","gsap","to","duration","ease","requestAnimationFrame","render","key","lerp","transform","removeEventListener","ev","getMousePos","map","a","b","c","d","n","clamp","num","min","max","e","posx","posy","event","pageX","pageY","clientX","clientY","document","body","scrollLeft","documentElement","scrollTop"],"mappings":"4FAAA,0EAIIA,EAAQ,CAAEC,EAAG,EAAGC,EAAG,GAGhB,SAASC,EAAOC,GACrB,IAAIC,EAAM,CAAED,GAAIA,GAChBC,EAAID,GAAGE,MAAMC,QAAU,EAEvB,IAAIC,EAASH,EAAID,GAAGK,wBAEhBC,EAAiB,CACnBC,GAAI,CAAEC,SAAU,EAAGC,QAAS,EAAGC,IAAK,IACpCC,GAAI,CAAEH,SAAU,EAAGC,QAAS,EAAGC,IAAK,KAYtCE,OAAOC,iBAAiB,aATJ,SAAhBC,IACFR,EAAeC,GAAGC,SAAWF,EAAeC,GAAGE,QAC7Cb,EAAMC,EAAIO,EAAOW,MAAQ,EAC3BT,EAAeK,GAAGH,SAAWF,EAAeK,GAAGH,SAC7CZ,EAAME,EAAIM,EAAOY,OAAS,EAC5BC,IAAKC,GAAGjB,EAAID,GAAI,CAAEmB,SAAU,GAAKC,KAAM,iBAAkBjB,QAAS,IAClEkB,uBAAsB,kBAKxB,SAASC,IAIP,IAAK,IAAMC,KAHXjB,EAAc,GAAOG,QAAUb,EAAMC,EAAIO,EAAOW,MAAQ,EACxDT,EAAc,GAAOG,QAAUb,EAAME,EAAIM,EAAOY,OAAS,EAEvCV,EAChBA,EAAeiB,GAAKf,SAAWgB,YAC7BlB,EAAeiB,GAAKf,SACpBF,EAAeiB,GAAKd,QACpBH,EAAeiB,GAAKb,KAIxBT,EAAID,GAAGE,MAAMuB,UAAb,cAAuCnB,EAAc,GAAOE,SAA5D,kBAAsFF,EAAc,GAAOE,SAA3G,MAEAa,uBAAsB,kBAAMC,OAnBAA,MAC5BV,OAAOc,oBAAoB,YAAaZ,MApB5CF,OAAOC,iBAAiB,aAAa,SAAAc,GAAE,OAAK/B,EAAQgC,YAAYD,O,kCCLhE,wIACA,IAAME,EAAM,SAAChC,EAAGiC,EAAGC,EAAGC,EAAGC,GAAb,OAAqBpC,EAAIiC,IAAMG,EAAID,IAAOD,EAAID,GAAKE,GAGzDR,EAAO,SAACM,EAAGC,EAAGG,GAAP,OAAc,EAAIA,GAAKJ,EAAII,EAAIH,GAEtCI,EAAQ,SAACC,EAAKC,EAAKC,GAAX,OAAoBF,GAAOC,EAAMA,EAAMD,GAAOE,EAAMA,EAAMF,GAGlER,EAAc,SAAAW,GAClB,IAAIC,EAAO,EACPC,EAAO,EAYX,OAXKF,IAAGA,EAAI3B,OAAO8B,OACfH,EAAEI,OAASJ,EAAEK,OACfJ,EAAOD,EAAEI,MACTF,EAAOF,EAAEK,QACAL,EAAEM,SAAWN,EAAEO,WACxBN,EACED,EAAEM,QAAUE,SAASC,KAAKC,WAAaF,SAASG,gBAAgBD,WAClER,EACEF,EAAEO,QAAUC,SAASC,KAAKG,UAAYJ,SAASG,gBAAgBC,WAG5D,CAAEtD,EAAG2C,EAAM1C,EAAG2C","file":"16-7f4a733b266b0ca52afc.js","sourcesContent":["import { gsap } from \"gsap\"\nimport { lerp, getMousePos } from \"./utils\"\n\n// Track the mouse position\nlet mouse = { x: 0, y: 0 }\nwindow.addEventListener(\"mousemove\", ev => (mouse = getMousePos(ev)))\n\nexport function Cursor(el) {\n  let DOM = { el: el }\n  DOM.el.style.opacity = 0\n\n  let bounds = DOM.el.getBoundingClientRect()\n\n  let renderedStyles = {\n    tx: { previous: 0, current: 0, amt: 0.2 },\n    ty: { previous: 0, current: 0, amt: 0.2 },\n  }\n\n  let onMouseMoveEv = () => {\n    renderedStyles.tx.previous = renderedStyles.tx.current =\n      mouse.x - bounds.width / 2\n    renderedStyles.ty.previous = renderedStyles.ty.previous =\n      mouse.y - bounds.height / 2\n    gsap.to(DOM.el, { duration: 0.9, ease: \"Power3.easeOut\", opacity: 1 })\n    requestAnimationFrame(() => render())\n    window.removeEventListener(\"mousemove\", onMouseMoveEv)\n  }\n  window.addEventListener(\"mousemove\", onMouseMoveEv)\n\n  function render() {\n    renderedStyles[\"tx\"].current = mouse.x - bounds.width / 2\n    renderedStyles[\"ty\"].current = mouse.y - bounds.height / 2\n\n    for (const key in renderedStyles) {\n      renderedStyles[key].previous = lerp(\n        renderedStyles[key].previous,\n        renderedStyles[key].current,\n        renderedStyles[key].amt\n      )\n    }\n\n    DOM.el.style.transform = `translateX(${renderedStyles[\"tx\"].previous}px) translateY(${renderedStyles[\"ty\"].previous}px)`\n\n    requestAnimationFrame(() => render())\n  }\n}\n","// Map number x from range [a, b] to [c, d]\nconst map = (x, a, b, c, d) => ((x - a) * (d - c)) / (b - a) + c\n\n// Linear interpolation\nconst lerp = (a, b, n) => (1 - n) * a + n * b\n\nconst clamp = (num, min, max) => (num <= min ? min : num >= max ? max : num)\n\n// Gets the mouse position\nconst getMousePos = e => {\n  let posx = 0\n  let posy = 0\n  if (!e) e = window.event\n  if (e.pageX || e.pageY) {\n    posx = e.pageX\n    posy = e.pageY\n  } else if (e.clientX || e.clientY) {\n    posx =\n      e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft\n    posy =\n      e.clientY + document.body.scrollTop + document.documentElement.scrollTop\n  }\n\n  return { x: posx, y: posy }\n}\n\n// Generate a random float.\nconst getRandomFloat = (min, max) =>\n  (Math.random() * (max - min) + min).toFixed(2)\n\nexport { map, lerp, clamp, getMousePos, getRandomFloat }\n"],"sourceRoot":""}